--- displaylink-installer.sh	2020-05-05 12:31:00.000000000 +0200
+++ ../../displaylink-installer.sh	2020-07-10 23:22:58.000000000 +0200
@@ -126,16 +126,48 @@
   chmod 0644 /etc/init/displaylink-driver.conf
 }
 
+get_systemd_service_file()
+{
+  if which lsb_release >/dev/null; then
+    local R=$(lsb_release -d -s)
+    local R=${R#\"}
+    if [ -z "${R##openSUSE Tumbleweed*}" ]; then
+      echo "/usr/lib/systemd/system/displaylink.service"
+      return
+    fi
+  fi
+
+  echo "/lib/systemd/system/displaylink.service"
+  return
+}
+
+get_system_path_part()
+{
+  if which lsb_release >/dev/null; then
+    local R=$(lsb_release -d -s)
+    local R=${R#\"}
+    if [ -z "${R##openSUSE Tumbleweed*}" ]; then
+      echo "/usr/lib/systemd"
+      return
+    fi
+  fi
+
+  echo "/lib/systemd"
+  return
+}
+
 add_systemd_service()
 {
-  cat > /lib/systemd/system/displaylink-driver.service <<EOF
+  local ServiceFile=$(get_systemd_service_file)
+  cat > ${ServiceFile} <<'EOF'
+  
 [Unit]
 Description=DisplayLink Driver Service
 After=display-manager.service
 Conflicts=getty@tty7.service
 
 [Service]
-ExecStartPre=/bin/sh -c 'modprobe evdi || (dkms install \$(ls -t /usr/src | grep evdi | head -n1  | sed -e "s:-:/:") && modprobe evdi)'
+ExecStartPre=/bin/sh -c 'modprobe evdi || (dkms install $(ls -t /usr/src | grep evdi | head -n1  | sed -e "s:-:/:") && modprobe evdi)'
 ExecStart=/opt/displaylink/DisplayLinkManager
 Restart=always
 WorkingDirectory=/opt/displaylink
@@ -143,7 +175,7 @@
 
 EOF
 
-  chmod 0644 /lib/systemd/system/displaylink-driver.service
+  chmod 0644 ${ServiceFile}
 }
 
 add_runit_service()
@@ -180,14 +212,16 @@
 
 remove_systemd_service()
 {
+  local ServiceFile=$(get_systemd_service_file)
+  local path_part=$(get_system_path_part)
   driver_name="displaylink-driver"
-  if grep -sqi displaylink /lib/systemd/system/dlm.service; then
+  if grep -sqi displaylink $path_part/system/dlm.service; then
     driver_name="dlm"
   fi
   echo "Stopping ${driver_name} systemd service"
   systemctl stop ${driver_name}.service
   systemctl disable ${driver_name}.service
-  rm -f /lib/systemd/system/${driver_name}.service
+  rm -f $path_part/system/${driver_name}.service
 }
 
 remove_runit_service()
@@ -316,7 +350,8 @@
     ln -sf $COREDIR/suspend.sh /etc/pm/sleep.d/displaylink.sh
   elif [ "$1" = "systemd" ]
   then
-    ln -sf $COREDIR/suspend.sh /lib/systemd/system-sleep/displaylink.sh
+    local path_part=$(get_system_path_part)
+    ln -sf $COREDIR/suspend.sh $path_part/system-sleep/displaylink.sh
     if [ -d "/etc/pm/sleep.d" ];
     then
       ln -sf $COREDIR/suspend.sh /etc/pm/sleep.d/10_displaylink
@@ -340,7 +375,8 @@
 {
   rm -f /etc/pm/sleep.d/displaylink.sh
   rm -f /etc/pm/sleep.d/10_displaylink
-  rm -f /lib/systemd/system-sleep/displaylink.sh
+  local path_part=$(get_system_path_part)
+  rm -f $path_part/system-sleep/displaylink.sh
   rm -f /etc/zzz.d/suspend/displaylink.sh /etc/zzz.d/resume/displaylink.sh
 }
 
@@ -521,16 +557,52 @@
 
 install_dependencies()
 {
-  hash apt 2>/dev/null || return
-  install_dependencies_apt
+
+  if hash lsb_release 2>/dev/null; then
+    local R
+    R=$(lsb_release -d -s)
+    local R=${R#\"}
+    
+    echo "Distribution discovered: $R"
+    if [ -z "${R##openSUSE Tumbleweed*}" ] ;then
+        install_dependencies_zypper
+    else
+        hash apt 2>/dev/null || return
+        install_dependencies_apt
+    fi
+  fi
+
 }
 
-check_libdrm()
+check_libdrm_apt()
 {
   hash apt 2>/dev/null || return
   apt list -qq --installed libdrm-dev 2>/dev/null | grep -q libdrm-dev
 }
 
+check_libdrm_zypper()
+{
+  echo "zypper checkin libdr..."
+}
+
+check_libdrm()
+{
+
+  if hash lsb_release 2>/dev/null; then
+    local R
+    R=$(lsb_release -d -s)
+    local R=${R#\"}
+    
+    echo "Distribution discovered: $R"
+    if [ -z "${R##openSUSE Tumbleweed*}" ] ;then
+        check_libdrm_zypper
+    else
+        check_libdrm_apt
+    fi
+  fi
+
+}
+
 apt_ask_for_dependencies()
 {
   apt --simulate install dkms libdrm-dev 2>&1 |  grep  "^E: " > /dev/null && return 1
@@ -545,6 +617,13 @@
   apt update
 }
 
+install_dependencies_zypper()
+{
+    echo "zypper checkin repos..."
+    #empty for now
+    #zypper se --installed-only | grep libdrm-dev
+}
+
 install_dependencies_apt()
 {
   hash dkms 2>/dev/null
@@ -592,20 +671,22 @@
 
 detect_init_daemon()
 {
-    INIT=$(readlink /proc/1/exe)
-    if [ "$INIT" == "/sbin/init" ]; then
-        INIT=$(/sbin/init --version)
-    fi
-
-    [ -z "${INIT##*upstart*}" ] && SYSTEMINITDAEMON="upstart"
-    [ -z "${INIT##*systemd*}" ] && SYSTEMINITDAEMON="systemd"
-    [ -z "${INIT##*runit*}" ] && SYSTEMINITDAEMON="runit"
-
     if [ -z "$SYSTEMINITDAEMON" ]; then
-        echo "ERROR: the installer script is unable to find out how to start DisplayLinkManager service automatically on your system." >&2
-        echo "Please set an environment variable SYSTEMINITDAEMON to 'upstart', 'systemd' or 'runit' before running the installation script to force one of the options." >&2
-        echo "Installation terminated." >&2
-        exit 1
+        INIT=$(readlink /proc/1/exe)
+        if [ "$INIT" == "/sbin/init" ]; then
+            INIT=$(/sbin/init --version)
+        fi
+
+        [ -z "${INIT##*upstart*}" ] && SYSTEMINITDAEMON="upstart"
+        [ -z "${INIT##*systemd*}" ] && SYSTEMINITDAEMON="systemd"
+        [ -z "${INIT##*runit*}" ] && SYSTEMINITDAEMON="runit"
+        
+        if [ -z "$SYSTEMINITDAEMON" ]; then
+            echo "ERROR: the installer script is unable to find out how to start DisplayLinkManager service automatically on your system." >&2
+            echo "Please set an environment variable SYSTEMINITDAEMON to 'upstart', 'systemd' or 'runit' before running the installation script to force one of the options." >&2
+            echo "Installation terminated." >&2
+            exit 1
+        fi
     fi
 }
 
@@ -614,11 +695,13 @@
   if hash lsb_release 2>/dev/null; then
     local R
     R=$(lsb_release -d -s)
-
+    local R=${R#\"}
+    
     echo "Distribution discovered: $R"
     [ -z "${R##Ubuntu 14.*}" ] && return
     [ -z "${R##Ubuntu 15.*}" ] && return
     [ -z "${R##Ubuntu 16.04*}" ] && return
+    [ -z "${R##openSUSE Tumbleweed*}" ] && return
   else
     echo "WARNING: This is not an officially supported distribution." >&2
     echo "Please use DisplayLink Forum for getting help if you find issues." >&2
